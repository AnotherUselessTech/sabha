#!/usr/bin/env node

/**
 * Module dependencies.
 */

var {app, dbClient, createRoom, addChatToRoom, getAllChatsInRoom } = require('../app');
// var debug = require('debug')('sabha-server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

var allChats = {};

io.on('connection', (socket) => {
  socket.on('inputting', (msg) => {
    console.log("Message: "+msg);
  });
  socket.on('streaming', (msg) => {
    let id = '';
    console.log("Message: "+msg.audio);
    io.emit('listening', {id: msg.id, audio: msg.audio, video: msg.video});
  });
  socket.on('joined', msg => {
    dbClient.connect(err => {
      console.log(err);
      dbClient.db('sabha').listCollections().toArray((err,collections) => {
        if(collections.filter(collection => collection.name === msg.roomName).length === 0) {
          createRoom(msg.roomName);
        }
      })
    })    
  });
  socket.on('captureChat', msg => {
    console.log("Chat Message: "+msg.username+msg.message.time+msg.message.text);
    dbClient.connect(err => {
      console.log(err);
      dbClient.db('sabha').listCollections().toArray((err,collections) => {
        err && console.error("No such collection available - "+msg.roomName);
        if(collections.filter(collection => collection.name === msg.roomName).length === 0) {
          throw 'What the hell are you doing?'
        }
        addChatToRoom(msg);
        getAllChatsInRoom(msg.roomName, (allMessages) => {
          console.log("Oh! So many!");
          io.emit('otherschatreplies', {chatsData: allMessages, dontlook: process.env.mongopwd});
        });
      })
    }) 
    
  });
  socket.on('initialize', msg => {
    console.log("Initialized successfully");
    getAllChatsInRoom(msg.roomName, (allMessages) => {
      console.log("Oh! So many!");
      // io.emit('otherschatrepliess', {chatsData: allMessages});
    });
    // dbClient.connect(err => {
    //   console.log(err);
    //   dbClient.db('sabha').listCollections().toArray((err,collections) => {
    //     if(collections.filter(collection => collection.name === msg.roomName).length === 0) {
    //       createRoom(msg.roomName);
    //     }
    //     else {
    //       getAllChatsInRoom(msg.roomName, (allMessages) => {
    //         console.log("Oh! So many!");
    //         io.emit('otherschatreplies', {chatsData: allMessages});
    //       });
    //     }
    //   })
    // })
  });
});
server.listen(port, () => {
  console.log("yeah, i am listening!");
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  // debug('Listening on ' + bind);
}
