{"version":3,"sources":["Meet.js","Chat.js","urls.js","NativeMeet.js","App.js","serviceWorker.js","index.js"],"names":["inputStyle","width","lineHeight","borderRadius","border","padding","backgroundColor","marginLeft","buttonStyle","fontSize","marginTop","divStyle","display","margin","flexDirection","alignItems","inputDiv","flex","buttonDiv","Meet","props","useState","jitsiState","setJitsiState","roomName","setRoomName","displayName","setDisplayName","options","height","parentNode","userInfo","useEffect","console","log","document","getElementById","divId","JitsiMeetExternalAPI","window","style","onChange","e","target","value","onClick","Chat","userName","setUserName","chatStarted","setrChatStarted","chatInput","setChatInput","chatsData","allChat","setAllChat","socket","io","emit","on","chats","dontlook","getTimeString","timeStamp","time","Date","Number","getHours","getMinutes","className","map","message","user","backgroundImage","onSubmit","preventDefault","username","getTime","text","type","placeholder","key","serverUrl","process","PORT","videoDiv","justifyContent","video","NativeMeet","streamedVideo","setStreamedVideo","localVideo","navigator","getUserMedia","audio","stream","srcObject","id","getTracks","error","warn","msg","newMedia","MediaStream","actualMedia","addTrack","autoPlay","muted","App","to","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e57fccc0.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nconst inputStyle = {\r\n    width:'30%',\r\n    lineHeight: 2.5,\r\n    borderRadius: '4px',\r\n    border: '1px solid green',\r\n    padding: '5px',\r\n    backgroundColor:'#dcf4d1',\r\n    marginLeft: '10px'\r\n}\r\n\r\nconst buttonStyle = {\r\n    backgroundColor: 'deepskyblue',\r\n    lineHeight: 2.5,\r\n    fontSize: 'medium',\r\n    borderRadius: '4px',\r\n    width: '30%',\r\n    marginTop: '30px'\r\n}\r\n\r\nconst divStyle = {\r\n    display: 'flex',\r\n    margin: '10%',\r\n    marginLeft: '30%',\r\n    width: '50%',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n}\r\n\r\nconst inputDiv = {\r\n    width: '100%',\r\n    display: 'flex',\r\n    margin: '10px',\r\n    alignItems: 'center',\r\n    flex: 1\r\n}\r\n\r\nconst buttonDiv = {\r\n    width: '100%',\r\n    flex: 1,\r\n    display: 'flex',\r\n    alignItems: 'flex-end'\r\n}\r\n\r\nexport default function Meet(props) {\r\n    \r\n    let [jitsiState, setJitsiState] = useState(false);\r\n    let [roomName, setRoomName] = useState('');\r\n    let [displayName, setDisplayName] = useState('Fellow Jitser');\r\n  \r\n    const domain = 'meet.jit.si';\r\n    const options = {\r\n      roomName: roomName,\r\n      height: '35em',\r\n      parentNode: '',\r\n      userInfo: {\r\n          displayName\r\n      }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Update the document title using the browser API\r\n          if(jitsiState && roomName) {\r\n            // const script = document.createElement(\"script\");\r\n            // script.src = \"https://meet.jit.si/external_api.js\";\r\n            // script.async = false;\r\n            // script.onload = () => {\r\n    \r\n              console.log(\"************************\\n\" + document.getElementById(props.divId));\r\n              const JitsiMeetExternalAPI = window.JitsiMeetExternalAPI;\r\n              setJitsiState(true);\r\n              options.parentNode = document.getElementById(props.divId);\r\n              // setJitsiParentNode(document.getElementById('meet'));\r\n              console.log(window.JitsiMeetExternalAPI);\r\n              new JitsiMeetExternalAPI(domain, options);\r\n    \r\n            // };\r\n    \r\n            // document.body.appendChild(script);\r\n          }\r\n        //   else {\r\n        //     console.log(\"Second mount!\");\r\n        //     const JitsiMeetExternalAPI = window.JitsiMeetExternalAPI;\r\n        //     new JitsiMeetExternalAPI(domain, options);\r\n        //   }\r\n        \r\n      }, [jitsiState,options,props.divId,roomName]);\r\n\r\n    return (\r\n        <div>\r\n           {!jitsiState && \r\n                <div style={{height: '35em'}}>\r\n                <div style={divStyle}>\r\n                        <div style = {inputDiv}>\r\n                            <span>Room Name</span>\r\n                            <input style={inputStyle} onChange = {(e)=>{setRoomName(e.target.value)}}></input>\r\n                        </div>\r\n                        <div style = {inputDiv}>\r\n                            <span>User Name &nbsp;</span>\r\n                            <input style={inputStyle} onChange = {(e)=>{setDisplayName(e.target.value)}}></input>\r\n                        </div>\r\n                        <div style = {buttonDiv}>\r\n                            <button style={buttonStyle} onClick = {() => {setJitsiState(true)}}>Join Room</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n           }\r\n        </div>\r\n        \r\n    )\r\n}","/* eslint-disable */\r\nimport React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\n// import Chat2 from './Chat2';\r\nimport './ChatStyles.css';\r\n// import { serverUrl } from './urls';\r\n\r\nconst inputStyle = {\r\n    width: '30%',\r\n    lineHeight: 2.5,\r\n    borderRadius: '4px',\r\n    border: '1px solid green',\r\n    padding: '5px',\r\n    backgroundColor: '#dcf4d1',\r\n    marginLeft: '10px'\r\n}\r\n\r\nconst chatInputStyle = {\r\n    width: '50%',\r\n    lineHeight: 2.5,\r\n    borderRadius: '4px',\r\n    border: '1px solid green',\r\n    padding: '5px',\r\n    backgroundColor: '#dcf4d1',\r\n    marginLeft: '10px'\r\n}\r\n\r\nconst buttonStyle = {\r\n    backgroundColor: 'lightgreen',\r\n    lineHeight: 2.5,\r\n    fontSize: 'medium',\r\n    borderRadius: '4px',\r\n    width: '30%',\r\n    marginTop: '30px'\r\n}\r\n\r\nconst chatButtonStyle = {\r\n    backgroundColor: 'lightgreen',\r\n    lineHeight: 1.5,\r\n    fontSize: 'medium',\r\n    borderRadius: '4px',\r\n    width: '30%',\r\n    marginTop: '30px'\r\n}\r\n\r\nconst divStyle = {\r\n    display: 'flex',\r\n    margin: '10%',\r\n    marginLeft: '30%',\r\n    width: '50%',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n}\r\n\r\nconst inputDiv = {\r\n    width: '100%',\r\n    display: 'flex',\r\n    margin: '10px',\r\n    alignItems: 'center',\r\n    flex: 1\r\n}\r\n\r\nconst buttonDiv = {\r\n    width: '100%',\r\n    flex: 1,\r\n    display: 'flex',\r\n    alignItems: 'flex-end'\r\n}\r\n\r\nconst Chat = () => {\r\n    const [userName, setUserName] = useState('');\r\n    const [roomName, setRoomName] = useState('');\r\n    const [chatStarted, setrChatStarted] = useState(false);\r\n    const [chatInput, setChatInput] = useState('');\r\n    const [otherChat, setOtherChat] = useState({});\r\n    const [myChat, setMyChat] = useState({});\r\n    const [allChat, setAllChat] = useState({chatsData: []});\r\n\r\n    const setUsersData = (chats, othersChatSet, myChatSet) => {\r\n        Object.keys(chats.chatsData).forEach(user => {\r\n            if (chats.chatsData[user].messages.length) {\r\n                if (user !== userName) {\r\n                    if (othersChatSet[user] && (chats.chatsData[user].messages.length !== othersChatSet[user].messages.length)) {\r\n                        console.log(1)\r\n                        othersChatSet[user] = { username: user, messages: chats.chatsData[user].messages };\r\n                        console.log(2)\r\n                        console.log(\"others chat changed\");\r\n                    }\r\n                    else if (!othersChatSet[user]) {\r\n                        othersChatSet[user] = { username: user, messages: chats.chatsData[user].messages };\r\n                        console.log(\"others chat created\");\r\n                    }\r\n                }\r\n                else {\r\n                    if (myChat[user] && (chats.chatsData[user].messages.length !== myChat[user].messages.length)) {\r\n                        myChatSet[user] = { username: user, messages: chats.chatsData[user].messages };\r\n                        console.log(\"my chat changed\");\r\n                    }\r\n                    else if (!myChatSet[user]) {\r\n                        myChatSet[user] = { username: user, messages: chats.chatsData[user].messages }\r\n                        console.log(\"my chat created\");\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(chatStarted) {\r\n            const socket = io();\r\n            socket.emit('initialize', {roomName});\r\n            socket.on('otherschatreplies', (chats) => {\r\n            let myChatSet = {};\r\n            let othersChatSet = {};\r\n            // setUsersData(chats, othersChatSet, myChatSet);\r\n            // setOtherChat(othersChatSet);\r\n            // setMyChat(myChatSet);\r\n            console.log(\"Trying not to look\");\r\n            console.log(chats.dontlook);\r\n            setAllChat(chats);\r\n\r\n        });\r\n        }\r\n    }, [chatStarted]);\r\n\r\n    const collectAndSortMessages = () => {\r\n        const allChats = { ...otherChat, ...myChat };\r\n        let messages = [];\r\n        Object.keys(allChats).forEach(user => {\r\n            const msgsOfUser = allChats[user].messages.map(message => {\r\n                return {\r\n                    user,\r\n                    time: message.time,\r\n                    text: message.text\r\n                }\r\n            });\r\n            messages = messages.concat(msgsOfUser);\r\n            messages = messages.sort((a, b) => a.time - b.time);\r\n        });\r\n\r\n        return messages;\r\n    }\r\n\r\n    const login = () => {\r\n        return (\r\n            <div style={divStyle}>\r\n                <div style={inputDiv}>\r\n                    <span>Room Name</span>\r\n                    <input style={inputStyle} key=\"roomname\" onChange={(e) => { setRoomName(e.target.value) }}></input>\r\n                </div>\r\n                <div style={inputDiv}>\r\n                    <span>User Name &nbsp;</span>\r\n                    <input style={inputStyle} key=\"username\" onChange={(e) => { setUserName(e.target.value) }}></input>\r\n                </div>\r\n                <div style={buttonDiv}>\r\n                    <button style={buttonStyle} onClick={() => {\r\n                        setrChatStarted(true);\r\n                        const socket = io();\r\n                        socket.emit('joined', { roomName: roomName, username: userName });\r\n                    }}>Join Chat Room</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const getTimeString = (timeStamp) => {\r\n        let time = new Date(Number(timeStamp));\r\n        return `${time.getHours()}:${time.getMinutes()}`;\r\n    }\r\n\r\n    const chatView = () => {\r\n        console.log(\"Rerendering chat view...\");\r\n        // const allChats = { ...otherChat, ...myChat };\r\n        // console.log({ ...otherChat, ...myChat });\r\n        console.log(allChat);\r\n        console.log(userName, roomName);\r\n        // const allMessages = collectAndSortMessages();\r\n        return (\r\n            <div>\r\n                <div className=\"msger\">\r\n                    <header className=\"msger-header\">\r\n                        <div className=\"msger-header-title\">\r\n                            <i className=\"fas fa-comment-alt\"></i> Sabha Chat Room - {roomName}\r\n                        </div>\r\n                        <div className=\"msger-header-options\">\r\n                            <span><i className=\"fas fa-cog\">{userName}</i></span>\r\n                        </div>\r\n                    </header>\r\n\r\n                    <div className=\"msger-chat\">\r\n                        {/* allMessages.map(...*/}\r\n                        {allChat.chatsData.map(message => {\r\n                            if (message.user !== userName) {\r\n                                return (\r\n                                    <div className=\"msg left-msg\">\r\n                                        <div\r\n                                            className=\"msg-img\"\r\n                                            style={{ backgroundImage: \"url(https://image.flaticon.com/icons/svg/327/327779.svg)\" }}\r\n                                        ></div>\r\n\r\n                                        <div className=\"msg-bubble\">\r\n                                            <div className=\"msg-info\">\r\n                                                <div className=\"msg-info-name\">{message.user}</div>\r\n                                                <div className=\"msg-info-time\">{getTimeString(message.time)}</div>\r\n                                            </div>\r\n\r\n                                            <div className=\"msg-text\">\r\n                                                {message.message}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            }\r\n                            else {\r\n                                return <div className=\"msg right-msg\">\r\n                                    <div\r\n                                        className=\"msg-img\"\r\n                                        style={{ backgroundImage: \"url(https://image.flaticon.com/icons/svg/145/145867.svg)\" }}\r\n                                    ></div>\r\n\r\n                                    <div className=\"msg-bubble\">\r\n                                        <div className=\"msg-info\">\r\n                                            <div className=\"msg-info-name\">{message.user}</div>\r\n                                            <div className=\"msg-info-time\">{getTimeString(message.time)}</div>\r\n                                        </div>\r\n\r\n                                        <div className=\"msg-text\">\r\n                                            {message.message}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                        })\r\n\r\n                        }\r\n\r\n                    </div>\r\n\r\n                    <form className=\"msger-inputarea\" onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        const socket = io();\r\n                        socket.emit('captureChat', {\r\n                            username: userName,\r\n                            roomName: roomName,\r\n                            message: {\r\n                                time: (new Date()).getTime(),\r\n                                text: chatInput\r\n                            }\r\n                        });\r\n                        setChatInput('');\r\n                    }}>\r\n                        <input type=\"text\" value={chatInput} onChange={(e) => { setChatInput(e.target.value) }} className=\"msger-input\" placeholder=\"Enter your message...\" />\r\n                        <button type=\"submit\" className=\"msger-send-btn\" >Send</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: '35em' }}>\r\n            {chatStarted ? chatView() : login()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;","/* eslint-disable */\r\nexport const serverUrl = () => {\r\n    let url = process.env.PUBLIC_URL;\r\n    let port = process.env.PORT;\r\n    if(process.env.NODE_ENV === 'development') {\r\n        return 'http://localhost:3001'\r\n    }\r\n    else return process.env.PUBLIC_URL;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { serverUrl } from './urls';\r\nconst videoDiv = {\r\n    display: 'flex',\r\n    justifyContent: 'space-around'\r\n}\r\n\r\nconst video = {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    width: '80%',\r\n    height: '80%'\r\n}\r\n\r\nconst NativeMeet = (props) => {\r\n\r\n    let [streamedVideo, setStreamedVideo] = useState('');\r\n\r\n    useEffect(() => {\r\n        const localVideo = document.getElementById('local-video');\r\n        console.log(\"Local video: \"+localVideo);\r\n        console.log(\"Streamed video is: \"+streamedVideo);\r\n        console.log(\"Server: \"+serverUrl());\r\n        console.log(\"Publi URL: \"+process.env.PUBLIC_URL);\r\n        console.log(\"Port: \"+process.env.PORT);\r\n        const socket = io(serverUrl());\r\n        navigator.getUserMedia(\r\n            { video: true, audio: true },\r\n            stream => {\r\n              if (localVideo) {\r\n                localVideo.srcObject = stream;\r\n                console.log(stream);\r\n                socket.emit('streaming', {id: 'local-video', audio: stream.getTracks()[0].id, video: stream.getTracks()[1].id});\r\n                !streamedVideo && setStreamedVideo('bla');\r\n              }\r\n            },\r\n            error => {\r\n              console.warn(error.message);\r\n            }\r\n           );\r\n    }, [streamedVideo]);\r\n    \r\n    useEffect(() => {\r\n        if(streamedVideo === 'bla') {\r\n            const socket = io('http://localhost:3001');\r\n            socket.on('listening', (msg) => {\r\n                console.log(msg);\r\n                if(msg.id) {\r\n                    const newMedia = new window.MediaStream();\r\n                    const actualMedia = document.getElementById(msg.id).srcObject.getTracks()\r\n                    newMedia.addTrack(actualMedia[0]);\r\n                    newMedia.addTrack(actualMedia[1]);\r\n                    let streamedVideo = document.getElementById('streamed-video');\r\n                    streamedVideo.srcObject = newMedia;\r\n                    setStreamedVideo('ad');\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div style={{ height: '35em' }}>\r\n            <div className=\"content-container\">\r\n                <div className=\"video-chat-container\">\r\n                    <div className=\"video-container\" style={videoDiv}>\r\n                        <div style={video}>\r\n                            <h3>Me</h3>\r\n                            <video autoPlay muted className=\"local-video\" id=\"local-video\"></video>\r\n                        </div>\r\n                        <div style={video}>\r\n                            <h3>You</h3>\r\n                            <video autoPlay muted className=\"streamed-video\" id=\"streamed-video\">{streamedVideo}</video>\r\n                        </div>         \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NativeMeet;","import React from 'react';\n// import Root from './Root';\nimport Meet from './Meet';\nimport Chat from './Chat';\nimport NativeMeet from './NativeMeet';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <Router>\n      <div>\n        <nav>\n          <div className='navbar'>\n            <h3>SABHA</h3>\n            <Link to=\"/\">Jitsi</Link>\n            <Link to=\"/chat\">Chat</Link>\n            <Link to=\"/meet\">Meet</Link>\n          </div>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/chat\">\n          <Chat />\n          </Route>\n          <Route path=\"/meet\">\n          <div id=\"meet2\">\n            </div> \n            <NativeMeet />\n          </Route>\n          <Route path=\"/\">\n            <div id=\"meet\">\n            </div>\n            <Meet divId = 'meet'/> \n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('rootdiv')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nif(process.env.NODE_ENV === 'production') {\n  serviceWorker.register();\n}\nelse {\n  serviceWorker.unregister();\n}\n\n"],"sourceRoot":""}