{"version":3,"sources":["logo.svg","Root.js","Meet.js","NativeMeet.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","className","src","logo","alt","href","target","rel","inputStyle","width","lineHeight","borderRadius","border","padding","backgroundColor","marginLeft","buttonStyle","fontSize","marginTop","divStyle","display","margin","flexDirection","alignItems","inputDiv","flex","buttonDiv","Meet","props","useState","jitsiState","setJitsiState","roomName","setRoomName","displayName","setDisplayName","options","height","parentNode","userInfo","useEffect","console","log","document","getElementById","divId","JitsiMeetExternalAPI","window","style","onChange","e","value","onClick","videoDiv","justifyContent","video","NativeMeet","streamedVideo","setStreamedVideo","localVideo","socket","io","navigator","getUserMedia","audio","stream","srcObject","emit","id","getTracks","error","warn","message","on","msg","newMedia","MediaStream","actualMedia","addTrack","autoPlay","muted","App","to","path","Root","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fcead2bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\n\r\nexport default function () {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <p>\r\n                    Edit <code>src/App.js</code> and save to reload.\r\n                </p>\r\n                <a\r\n                    className=\"App-link\"\r\n                    href=\"https://reactjs.org\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    Learn React\r\n                </a>\r\n            </header>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\n\r\nconst inputStyle = {\r\n    width:'30%',\r\n    lineHeight: 2.5,\r\n    borderRadius: '4px',\r\n    border: '1px solid green',\r\n    padding: '5px',\r\n    backgroundColor:'#dcf4d1',\r\n    marginLeft: '10px'\r\n}\r\n\r\nconst buttonStyle = {\r\n    backgroundColor: 'deepskyblue',\r\n    lineHeight: 2.5,\r\n    fontSize: 'medium',\r\n    borderRadius: '4px',\r\n    width: '30%',\r\n    marginTop: '30px'\r\n}\r\n\r\nconst divStyle = {\r\n    display: 'flex',\r\n    margin: '10%',\r\n    marginLeft: '30%',\r\n    width: '50%',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n}\r\n\r\nconst inputDiv = {\r\n    width: '100%',\r\n    display: 'flex',\r\n    margin: '10px',\r\n    alignItems: 'center',\r\n    flex: 1\r\n}\r\n\r\nconst buttonDiv = {\r\n    width: '100%',\r\n    flex: 1,\r\n    display: 'flex',\r\n    alignItems: 'flex-end'\r\n}\r\n\r\nexport default function Meet(props) {\r\n    \r\n    let [jitsiState, setJitsiState] = useState(false);\r\n    let [roomName, setRoomName] = useState('');\r\n    let [displayName, setDisplayName] = useState('Fellow Jitser');\r\n  \r\n    const domain = 'meet.jit.si';\r\n    const options = {\r\n      roomName: roomName,\r\n      height: '35em',\r\n      parentNode: '',\r\n      userInfo: {\r\n          displayName\r\n      }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Update the document title using the browser API\r\n          if(jitsiState && roomName) {\r\n            // const script = document.createElement(\"script\");\r\n            // script.src = \"https://meet.jit.si/external_api.js\";\r\n            // script.async = false;\r\n            // script.onload = () => {\r\n    \r\n              console.log(\"************************\\n\" + document.getElementById(props.divId));\r\n              const JitsiMeetExternalAPI = window.JitsiMeetExternalAPI;\r\n              setJitsiState(true);\r\n              options.parentNode = document.getElementById(props.divId);\r\n              // setJitsiParentNode(document.getElementById('meet'));\r\n              console.log(window.JitsiMeetExternalAPI);\r\n              new JitsiMeetExternalAPI(domain, options);\r\n    \r\n            // };\r\n    \r\n            // document.body.appendChild(script);\r\n          }\r\n        //   else {\r\n        //     console.log(\"Second mount!\");\r\n        //     const JitsiMeetExternalAPI = window.JitsiMeetExternalAPI;\r\n        //     new JitsiMeetExternalAPI(domain, options);\r\n        //   }\r\n        \r\n      }, [jitsiState,options,props.divId,roomName]);\r\n\r\n    return (\r\n        <div>\r\n           {!jitsiState && \r\n                <div style={{height: '35em'}}>\r\n                <div style={divStyle}>\r\n                        <div style = {inputDiv}>\r\n                            <span>Room Name</span>\r\n                            <input style={inputStyle} onChange = {(e)=>{setRoomName(e.target.value)}}></input>\r\n                        </div>\r\n                        <div style = {inputDiv}>\r\n                            <span>User Name &nbsp;</span>\r\n                            <input style={inputStyle} onChange = {(e)=>{setDisplayName(e.target.value)}}></input>\r\n                        </div>\r\n                        <div style = {buttonDiv}>\r\n                            <button style={buttonStyle} onClick = {() => {setJitsiState(true)}}>Join Room</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n           }\r\n        </div>\r\n        \r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\nconst videoDiv = {\r\n    display: 'flex',\r\n    justifyContent: 'space-around'\r\n}\r\n\r\nconst video = {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    width: '80%',\r\n    height: '80%'\r\n}\r\n\r\nconst NativeMeet = (props) => {\r\n\r\n    let [streamedVideo, setStreamedVideo] = useState('');\r\n\r\n    useEffect(() => {\r\n        const localVideo = document.getElementById('local-video');\r\n        console.log(\"Local video: \"+localVideo);\r\n        console.log(\"Streamed video is: \"+streamedVideo);\r\n        const socket = window.io();\r\n        navigator.getUserMedia(\r\n            { video: true, audio: true },\r\n            stream => {\r\n              if (localVideo) {\r\n                localVideo.srcObject = stream;\r\n                console.log(stream);\r\n                socket.emit('streaming', {id: 'local-video', audio: stream.getTracks()[0].id, video: stream.getTracks()[1].id});\r\n                !streamedVideo && setStreamedVideo('bla');\r\n              }\r\n            },\r\n            error => {\r\n              console.warn(error.message);\r\n            }\r\n           );\r\n    }, [streamedVideo]);\r\n    \r\n    useEffect(() => {\r\n        if(streamedVideo === 'bla') {\r\n            const socket = window.io();\r\n            socket.on('listening', (msg) => {\r\n                console.log(msg);\r\n                if(msg.id) {\r\n                    const newMedia = new window.MediaStream();\r\n                    const actualMedia = document.getElementById(msg.id).srcObject.getTracks()\r\n                    newMedia.addTrack(actualMedia[0]);\r\n                    newMedia.addTrack(actualMedia[1]);\r\n                    let streamedVideo = document.getElementById('streamed-video');\r\n                    streamedVideo.srcObject = newMedia;\r\n                    setStreamedVideo('ad');\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div style={{ height: '35em' }}>\r\n            <div className=\"content-container\">\r\n                <div className=\"video-chat-container\">\r\n                    <div className=\"video-container\" style={videoDiv}>\r\n                        <div style={video}>\r\n                            <h3>Me</h3>\r\n                            <video autoPlay muted className=\"local-video\" id=\"local-video\"></video>\r\n                        </div>\r\n                        <div style={video}>\r\n                            <h3>You</h3>\r\n                            <video autoPlay muted className=\"streamed-video\" id=\"streamed-video\">{streamedVideo}</video>\r\n                        </div>\r\n                        \r\n            \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NativeMeet;","import React from 'react';\nimport Root from './Root';\nimport Meet from './Meet';\nimport NativeMeet from './NativeMeet';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <Router>\n      <div>\n        <nav>\n          <div className='navbar'>\n            <h3>SABHA</h3>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/about\">About</Link>\n            <Link to=\"/meet\">Meet</Link>\n          </div>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n          <Root />\n          </Route>\n          <Route path=\"/meet\">\n          <div id=\"meet2\">\n            </div> \n            <NativeMeet />\n          </Route>\n          <Route path=\"/\">\n            <div id=\"meet\">\n            </div>\n            <Meet divId = 'meet'/> \n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nif(process.env.NODE_ENV === 'production') {\n  serviceWorker.register();\n}\nelse {\n  serviceWorker.unregister();\n}\n\n"],"sourceRoot":""}