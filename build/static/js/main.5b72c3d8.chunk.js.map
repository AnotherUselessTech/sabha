{"version":3,"sources":["logo.svg","Root.js","Meet.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","className","src","logo","alt","href","target","rel","inputStyle","width","lineHeight","borderRadius","border","padding","backgroundColor","buttonStyle","marginLeft","fontSize","Meet","props","useState","jitsiState","setJitsiState","roomName","setRoomName","options","height","parentNode","useEffect","console","log","document","getElementById","divId","JitsiMeetExternalAPI","window","style","onChange","e","value","onClick","App","to","path","Root","id","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5b72c3d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\n\r\nexport default function () {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <p>\r\n                    Edit <code>src/App.js</code> and save to reload.\r\n                </p>\r\n                <a\r\n                    className=\"App-link\"\r\n                    href=\"https://reactjs.org\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    Learn React\r\n                </a>\r\n            </header>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\n\r\nconst inputStyle = {\r\n    width:'40%',\r\n    lineHeight: 2.5,\r\n    borderRadius: '4px',\r\n    border: '1px solid green',\r\n    padding: '5px',\r\n    backgroundColor:'#dcf4d1'\r\n}\r\n\r\nconst buttonStyle = {\r\n    marginLeft: '10px',\r\n    backgroundColor: 'deepskyblue',\r\n    lineHeight: 2.5,\r\n    fontSize: 'medium',\r\n    borderRadius: '4px'\r\n}\r\n\r\nexport default function Meet(props) {\r\n    \r\n    let [jitsiState, setJitsiState] = useState(false);\r\n    let [roomName, setRoomName] = useState('');\r\n  \r\n    const domain = 'meet.jit.si';\r\n    const options = {\r\n      roomName: roomName,\r\n      height: '35em',\r\n      parentNode: ''\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Update the document title using the browser API\r\n          if(jitsiState && roomName) {\r\n            // const script = document.createElement(\"script\");\r\n            // script.src = \"https://meet.jit.si/external_api.js\";\r\n            // script.async = false;\r\n            // script.onload = () => {\r\n    \r\n              console.log(\"************************\\n\" + document.getElementById(props.divId));\r\n              const JitsiMeetExternalAPI = window.JitsiMeetExternalAPI;\r\n              setJitsiState(true);\r\n              options.parentNode = document.getElementById(props.divId);\r\n              // setJitsiParentNode(document.getElementById('meet'));\r\n              console.log(window.JitsiMeetExternalAPI);\r\n              new JitsiMeetExternalAPI(domain, options);\r\n    \r\n            // };\r\n    \r\n            // document.body.appendChild(script);\r\n          }\r\n        //   else {\r\n        //     console.log(\"Second mount!\");\r\n        //     const JitsiMeetExternalAPI = window.JitsiMeetExternalAPI;\r\n        //     new JitsiMeetExternalAPI(domain, options);\r\n        //   }\r\n        \r\n      }, [jitsiState,options,props.divId,roomName]);\r\n\r\n    return (\r\n        <div style={{height: '35em'}}>\r\n            {!jitsiState && <div style={{padding: '20%'}}>\r\n                    <input style={inputStyle} onChange = {(e)=>{setRoomName(e.target.value)}}></input>\r\n                    <button style={buttonStyle} onClick = {() => {setJitsiState(true)}}>Set Room Name</button>\r\n                </div>}\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport Root from './Root';\nimport Meet from './Meet';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <Router>\n      <div>\n        <nav>\n          <div className='navbar'>\n            <h3>SABHA</h3>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/about\">About</Link>\n            <Link to=\"/meet\">Meet</Link>\n          </div>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n          <Root />\n          </Route>\n          <Route path=\"/meet\">\n          <div id=\"meet2\">\n            </div> \n            <Meet divId = 'meet2'/> \n          </Route>\n          <Route path=\"/\">\n            <div id=\"meet\">\n            </div>\n            <Meet divId = 'meet'/> \n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nif(process.env.NODE_ENV === 'production') {\n  serviceWorker.register();\n}\nelse {\n  serviceWorker.unregister();\n}\n\n"],"sourceRoot":""}